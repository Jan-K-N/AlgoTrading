"""
Main script for RSI-based trading strategy. The script will be class based
so that it can contain backtest and other features.
"""
# pylint: disable=import-error
# pylint: disable=wrong-import-position
import sys
sys.path.append("..")
from data.finance_database import Database
import pandas as pd
import pandas_ta as pta
from pathlib import Path

class RSIStrategy():
    """
    Main class for the RSI-Strategy.
    """
    def __init__(self,ticker: str,start_date,end_date):
        self.ticker = ticker
        self.start_date = start_date
        self.end_date = end_date
        self.db_instance = Database()

    def get_data(self) -> pd.DataFrame:
        """
        Retrives price data for a specified ticker and
        date range from a database and calculates the 14-day
        Relative Strength Index (RSI) for each day.

        Returns:
        -------
        data: pd.DataFrame
            A DataFrame containing the RSI values for each day.
        """
        db_path = Path.home() / "Desktop" / "Database" / "SandP.db"
        # data = Database.get_price_data(self,start = self.start_date,
        #                          end = self.end_date,
        #                          ticker = self.ticker)
        data = self.db_instance.retrieve_data_from_database(start_date=self.start_date,
                                                    end_date=self.end_date,
                                                    ticker=self.ticker,
                                                    database_path=db_path)
        data.set_index('Date',inplace=True)
        rsi = pta.rsi(data['Adj Close'],length=14)
        data['RSI'] = rsi
        return data.dropna()

    def backtest(self):
        """
        Backtests the trading strategy using the RSI indicator.

        Returns:
        -------
        float:
            The total returns generated by the trading strategy.

        Notes:
        ------
        The backtest function implements a simple trading strategy using the RSI indicator.
        It generates buy and sell signals based on RSI levels crossing certain thresholds.
        When the RSI crosses below 30, a buy signal is generated, and when it crosses above
        70, a sell signal is generated. The function then computes the returns
        generated by the trading strategy using the buy and sell signals.

        The function assumes that the input data contains the following columns:
        - RSI: the RSI indicator values.
        - Adj Close: the adjusted close prices of the asset being traded.

        Examples:
        ---------
        >>> strategy = RSIStrategy()
        >>> strategy.backtest()
        0.05
        """
        data = self.get_data()
        buy_signals = []
        sell_signals = []
        position = 0
        for i in range(1, len(data)):
            if 30 > data['RSI'][i - 1] and position == 0:
                buy_signals.append(data.index[i])
                position = 1
            elif 70 < data['RSI'][i - 1] and position == 1:
                sell_signals.append(data.index[i])
                position = 0
        # Calculate returns
        returns = None
        for i, signal in enumerate(buy_signals):
            buy_price = data['Adj Close'][signal]
            sell_price = data['Adj Close'][sell_signals[i]]
            if buy_price > 0:
                if returns is None:
                    returns = (sell_price - buy_price) / buy_price
                else:
                    returns += (sell_price - buy_price) / buy_price
        if returns is None:
            returns = 0
        return returns
